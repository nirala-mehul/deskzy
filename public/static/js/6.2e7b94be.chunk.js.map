{"version":3,"sources":["constants.js","symbl.ai/auth/getToken.js","symbl.ai/auth/index.js","utils/index.js","ui-component/cards/Skeleton/JobStatus.js","ui-component/cards/Skeleton/EarningCard.js","views/dashboard/chart-data/pie-chart.js","ui-component/cards/Skeleton/PopularCard.js","views/dashboard/AnalyticsChart.js","../node_modules/@material-ui/icons/LocalMallOutlined.js","views/dashboard/EntitiesCard.js","symbl.ai/conversation/getExperiences.js","views/pages/Conversation/Insights.js","views/pages/Conversation/ConversationList.js","views/pages/Conversation/index.js"],"names":["API","BACKEND_URL","secret","JSON","stringify","type","appId","appSecret","getToken","config","method","url","headers","data","axios","AuthToken","this","token","then","accessToken","a","authToken","getAuthToken","sendDatatoServer","file","link","body","input","FormData","append","name","post","getItems","callback","get","res","catch","err","console","error","updateStatus","jobs","results","job","itemId","push","status","getAllTopics","getJobDetails","getDashboardData","useStyles","makeStyles","cardAction","padding","display","paddingTop","justifyContent","PopularCard","classes","container","spacing","gridSpacing","item","xs","alignItems","zeroMinWidth","variant","height","width","className","cardHeading","marginRight","marginTop","marginBottom","EarningCard","direction","getPieChartOptions","series","labels","showLabel","options","chart","legend","show","theme","palette","responsive","breakpoint","position","card","backgroundColor","primary","dark","color","overflow","zIndex","content","background","borderRadius","top","right","breakpoints","down","opacity","avatar","typography","commonAvatar","largeAvatar","fontSize","fontWeight","subHeading","avatarCircle","smallAvatar","cursor","circleIcon","transform","seriesAndLables","metrics","temp","i","length","e","hasOwnProperty","class","score","parseFloat","Number","toFixed","Object","values","keys","getChartData","result","sentimentAnalysis","classPredictions","flat","AnalyticsChart","isLoading","React","useState","timeValue","setTimeValue","handleChangeTime","event","newValue","chartData","Fragment","border","contentClass","disableElevation","size","onClick","sx","mb","_interopRequireDefault","require","defineProperty","exports","value","default","_createSvgIcon","_jsxRuntime","_default","jsx","d","primaryLight","divider","avatarSuccess","success","light","marginLeft","successDark","avatarError","orange","errorDark","EntitiesCard","entities","includes","getEntities","nameEntityRecognition","flexWrap","map","style","margin","textAlign","title","subheader","label","conversationId","TOKEN","Authorization","stepper","fontFamily","center","button","signDivider","flexGrow","backButton","startButton","instructions","formControl","minWidth","maxWidth","backdrop","drawer","iframe","ExperienceModal","open","handleClose","setUrl","useEffect","getExperiences","src","Button","component","Modal","onClose","Insights","selected","details","setDetails","setOpen","log","topics","textTopics","topicsMap","t","topicsArray","MainCard","root","Grid","lg","md","sm","SubCard","Typography","k","Chip","Avatar","textSummary","Divider","summary","none","rotateIcon","animation","ConversationList","props","conversations","setSelected","anchorEl","setAnchorEl","CardContent","alignContent","currentTarget","Menu","id","keepMounted","Boolean","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","AnimateButton","Date","timestamp","toLocaleString","CardActions","paper","boxShadow","shadows","left","text","gridItem","subcard","TopicPicker","setTopics","topicList","Autocomplete","multiple","onChange","filter","option","indexOf","defaultValue","freeSolo","renderTags","getTagProps","index","renderInput","params","TextField","placeholder","ConversationsAPI","setLoading","setData","setConversations","setConversationsUpdate","doms"],"mappings":"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","file":"static/js/6.2e7b94be.chunk.js","sourcesContent":["export const API = \"https://api.symbl.ai/v1\";\nexport const BACKEND_URL = \"http://localhost:80\";\n","import axios from \"axios\";\n\nvar secret = JSON.stringify({\n  type: \"application\",\n  appId: \"\",\n  appSecret:\"\",\n});\n\nexport default function getToken() {\n  var config = {\n    method: \"post\",\n    url: \"https://api.symbl.ai/oauth2/token:generate\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    data: secret,\n  };\n  return axios(config);\n}\n","import getToken from \"./getToken\";\n\nclass AuthToken {\n  constructor() {\n    this.token = null;\n    getToken().then((data) => (this.token = data.data.accessToken));\n  }\n  async getAuthToken() {\n    if (this.token) return this.token;\n    const data = await getToken();\n    return data.data.accessToken;\n  }\n}\n\nconst authToken = new AuthToken();\n\nexport default async function getAuthToken() {\n  return authToken.getAuthToken();\n}\n","import axios from \"axios\";\nimport { BACKEND_URL } from \"../constants\";\n\nexport function sendDatatoServer(data) {\n  const { file, link } = data;\n  let body = { ...data, input: link };\n  if (file) {\n    body = new FormData();\n    body.append(\"myFile\", file, file.name);\n    body.append(\"name\", data.name);\n    body.append(\"type\", data.type);\n  }\n  return axios.post(BACKEND_URL + \"/submit\", body);\n}\n\nexport function getItems(callback) {\n  axios\n    .get(BACKEND_URL + \"/all\")\n    .then((res) => {\n      callback(res.data);\n    })\n    .catch((err) => console.error(err));\n}\n\nexport async function updateStatus(jobs) {\n  const results = [];\n  for (let job in jobs) {\n    const res = await (\n      await axios.post(BACKEND_URL + \"/status\", { itemId: jobs[job].itemId })\n    ).data;\n    results.push({ ...jobs[job], status: res });\n  }\n  return results;\n}\n\nexport function getAllTopics() {\n  return [];\n}\n\nexport function getJobDetails(job) {\n  return axios.post(BACKEND_URL + \"/result\", { itemId: job.itemId });\n}\n\nexport function getDashboardData() {\n  return axios.get(BACKEND_URL + \"/dashboard\");\n}\n","import React from \"react\";\n// material-ui\nimport { makeStyles } from \"@material-ui/styles\";\nimport { Card, CardContent, Grid, Skeleton } from \"@material-ui/core\";\n\n// project imports\nimport { gridSpacing } from \"../../../store/constant\";\n\n// style constant\nconst useStyles = makeStyles({\n  cardAction: {\n    padding: \"10px\",\n    display: \"flex\",\n    paddingTop: 0,\n    justifyContent: \"center\",\n  },\n});\n\n//-----------------------|| SKELETON - POPULAR CARD ||-----------------------//\n\nconst PopularCard = () => {\n  const classes = useStyles();\n  return (\n    <Card>\n      <CardContent>\n        <Grid container spacing={gridSpacing}>\n          <Grid item xs={12}>\n            <Grid\n              container\n              alignItems=\"center\"\n              justifyContent=\"space-between\"\n              spacing={gridSpacing}\n            >\n              <Grid item xs zeroMinWidth>\n                <Skeleton variant=\"rect\" height={20} />\n              </Grid>\n              <Grid item>\n                <Skeleton variant=\"rect\" height={20} width={20} />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Skeleton variant=\"rect\" height={150} />\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={1}>\n              <Grid item xs={12}>\n                <Grid\n                  container\n                  alignItems=\"center\"\n                  spacing={gridSpacing}\n                  justifyContent=\"space-between\"\n                >\n                  <Grid item xs={6}>\n                    <Skeleton variant=\"rect\" height={20} />\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Grid\n                      container\n                      alignItems=\"center\"\n                      spacing={gridSpacing}\n                      justifyContent=\"space-between\"\n                    >\n                      <Grid item xs zeroMinWidth>\n                        <Skeleton variant=\"rect\" height={20} />\n                      </Grid>\n                      <Grid item>\n                        <Skeleton variant=\"rect\" height={16} width={16} />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={6}>\n                <Skeleton variant=\"rect\" height={20} />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={1}>\n              <Grid item xs={12}>\n                <Grid\n                  container\n                  alignItems=\"center\"\n                  spacing={gridSpacing}\n                  justifyContent=\"space-between\"\n                >\n                  <Grid item xs={6}>\n                    <Skeleton variant=\"rect\" height={20} />\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Grid\n                      container\n                      alignItems=\"center\"\n                      spacing={gridSpacing}\n                      justifyContent=\"space-between\"\n                    >\n                      <Grid item xs zeroMinWidth>\n                        <Skeleton variant=\"rect\" height={20} />\n                      </Grid>\n                      <Grid item>\n                        <Skeleton variant=\"rect\" height={16} width={16} />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={6}>\n                <Skeleton variant=\"rect\" height={20} />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={1}>\n              <Grid item xs={12}>\n                <Grid\n                  container\n                  alignItems=\"center\"\n                  spacing={gridSpacing}\n                  justifyContent=\"space-between\"\n                >\n                  <Grid item xs={6}>\n                    <Skeleton variant=\"rect\" height={20} />\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Grid\n                      container\n                      alignItems=\"center\"\n                      spacing={gridSpacing}\n                      justifyContent=\"space-between\"\n                    >\n                      <Grid item xs zeroMinWidth>\n                        <Skeleton variant=\"rect\" height={20} />\n                      </Grid>\n                      <Grid item>\n                        <Skeleton variant=\"rect\" height={16} width={16} />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={6}>\n                <Skeleton variant=\"rect\" height={20} />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={1}>\n              <Grid item xs={12}>\n                <Grid\n                  container\n                  alignItems=\"center\"\n                  spacing={gridSpacing}\n                  justifyContent=\"space-between\"\n                >\n                  <Grid item xs={6}>\n                    <Skeleton variant=\"rect\" height={20} />\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Grid\n                      container\n                      alignItems=\"center\"\n                      spacing={gridSpacing}\n                      justifyContent=\"space-between\"\n                    >\n                      <Grid item xs zeroMinWidth>\n                        <Skeleton variant=\"rect\" height={20} />\n                      </Grid>\n                      <Grid item>\n                        <Skeleton variant=\"rect\" height={16} width={16} />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={6}>\n                <Skeleton variant=\"rect\" height={20} />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={1}>\n              <Grid item xs={12}>\n                <Grid\n                  container\n                  alignItems=\"center\"\n                  spacing={gridSpacing}\n                  justifyContent=\"space-between\"\n                >\n                  <Grid item xs={6}>\n                    <Skeleton variant=\"rect\" height={20} />\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Grid\n                      container\n                      alignItems=\"center\"\n                      spacing={gridSpacing}\n                      justifyContent=\"space-between\"\n                    >\n                      <Grid item xs zeroMinWidth>\n                        <Skeleton variant=\"rect\" height={20} />\n                      </Grid>\n                      <Grid item>\n                        <Skeleton variant=\"rect\" height={16} width={16} />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={6}>\n                <Skeleton variant=\"rect\" height={20} />\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </CardContent>\n      <CardContent className={classes.cardAction}>\n        <Skeleton variant=\"rect\" height={25} width={75} />\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default PopularCard;\n","import React from \"react\";\n\n// material-ui\nimport { makeStyles } from \"@material-ui/styles\";\nimport { Card, CardContent, Grid, Skeleton } from \"@material-ui/core\";\n\n// style constant\nconst useStyles = makeStyles({\n  cardHeading: {\n    marginRight: \"8px\",\n    marginTop: \"18px\",\n    marginBottom: \"14px\",\n  },\n});\n\n//-----------------------|| SKELETON EARNING CARD ||-----------------------//\n\nconst EarningCard = () => {\n  const classes = useStyles();\n  return (\n    <Card>\n      <CardContent>\n        <Grid container direction=\"column\">\n          <Grid item>\n            <Grid container justifyContent=\"space-between\">\n              <Grid item>\n                <Skeleton variant=\"rect\" width={44} height={44} />\n              </Grid>\n              <Grid item>\n                <Skeleton variant=\"rect\" width={34} height={34} />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item>\n            <Skeleton variant=\"rect\" className={classes.cardHeading} height={40} />\n          </Grid>\n          <Grid item>\n            <Skeleton variant=\"rect\" height={30} />\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default EarningCard;\n","export default function getPieChartOptions({ series, labels }, showLabel = false) {\n  return {\n    series: series,\n    options: {\n      chart: {\n        width: 80,\n        type: \"pie\",\n      },\n      legend: {\n        show: showLabel,\n      },\n      labels: labels,\n      theme: {\n        palette: \"palette10\",\n      },\n      responsive: [\n        {\n          breakpoint: 480,\n          options: {\n            chart: {\n              width: 80,\n            },\n            legend: {\n              position: \"bottom\",\n            },\n          },\n        },\n      ],\n    },\n  };\n}\n","import React from \"react\";\n// material-ui\nimport { makeStyles } from \"@material-ui/styles\";\nimport { Card, CardContent, Grid, Skeleton } from \"@material-ui/core\";\n\n// project imports\nimport { gridSpacing } from \"./../../../store/constant\";\n\n// style constant\nconst useStyles = makeStyles({\n  cardAction: {\n    padding: \"10px\",\n    display: \"flex\",\n    paddingTop: 0,\n    justifyContent: \"center\",\n  },\n});\n\n//-----------------------|| SKELETON - POPULAR CARD ||-----------------------//\n\nconst PopularCard = () => {\n  const classes = useStyles();\n  return (\n    <Card>\n      <CardContent>\n        <Grid container spacing={gridSpacing}>\n          <Grid item xs={12}>\n            <Grid\n              container\n              alignItems=\"center\"\n              justifyContent=\"space-between\"\n              spacing={gridSpacing}\n            >\n              <Grid item xs zeroMinWidth>\n                <Skeleton variant=\"rect\" height={20} />\n              </Grid>\n              <Grid item>\n                <Skeleton variant=\"rect\" height={20} width={20} />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Skeleton variant=\"rect\" height={150} />\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={1}>\n              <Grid item xs={12}>\n                <Grid\n                  container\n                  alignItems=\"center\"\n                  spacing={gridSpacing}\n                  justifyContent=\"space-between\"\n                >\n                  <Grid item xs={6}>\n                    <Skeleton variant=\"rect\" height={20} />\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Grid\n                      container\n                      alignItems=\"center\"\n                      spacing={gridSpacing}\n                      justifyContent=\"space-between\"\n                    >\n                      <Grid item xs zeroMinWidth>\n                        <Skeleton variant=\"rect\" height={20} />\n                      </Grid>\n                      <Grid item>\n                        <Skeleton variant=\"rect\" height={16} width={16} />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={6}>\n                <Skeleton variant=\"rect\" height={20} />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={1}>\n              <Grid item xs={12}>\n                <Grid\n                  container\n                  alignItems=\"center\"\n                  spacing={gridSpacing}\n                  justifyContent=\"space-between\"\n                >\n                  <Grid item xs={6}>\n                    <Skeleton variant=\"rect\" height={20} />\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Grid\n                      container\n                      alignItems=\"center\"\n                      spacing={gridSpacing}\n                      justifyContent=\"space-between\"\n                    >\n                      <Grid item xs zeroMinWidth>\n                        <Skeleton variant=\"rect\" height={20} />\n                      </Grid>\n                      <Grid item>\n                        <Skeleton variant=\"rect\" height={16} width={16} />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={6}>\n                <Skeleton variant=\"rect\" height={20} />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={1}>\n              <Grid item xs={12}>\n                <Grid\n                  container\n                  alignItems=\"center\"\n                  spacing={gridSpacing}\n                  justifyContent=\"space-between\"\n                >\n                  <Grid item xs={6}>\n                    <Skeleton variant=\"rect\" height={20} />\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Grid\n                      container\n                      alignItems=\"center\"\n                      spacing={gridSpacing}\n                      justifyContent=\"space-between\"\n                    >\n                      <Grid item xs zeroMinWidth>\n                        <Skeleton variant=\"rect\" height={20} />\n                      </Grid>\n                      <Grid item>\n                        <Skeleton variant=\"rect\" height={16} width={16} />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={6}>\n                <Skeleton variant=\"rect\" height={20} />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={1}>\n              <Grid item xs={12}>\n                <Grid\n                  container\n                  alignItems=\"center\"\n                  spacing={gridSpacing}\n                  justifyContent=\"space-between\"\n                >\n                  <Grid item xs={6}>\n                    <Skeleton variant=\"rect\" height={20} />\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Grid\n                      container\n                      alignItems=\"center\"\n                      spacing={gridSpacing}\n                      justifyContent=\"space-between\"\n                    >\n                      <Grid item xs zeroMinWidth>\n                        <Skeleton variant=\"rect\" height={20} />\n                      </Grid>\n                      <Grid item>\n                        <Skeleton variant=\"rect\" height={16} width={16} />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={6}>\n                <Skeleton variant=\"rect\" height={20} />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container spacing={1}>\n              <Grid item xs={12}>\n                <Grid\n                  container\n                  alignItems=\"center\"\n                  spacing={gridSpacing}\n                  justifyContent=\"space-between\"\n                >\n                  <Grid item xs={6}>\n                    <Skeleton variant=\"rect\" height={20} />\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Grid\n                      container\n                      alignItems=\"center\"\n                      spacing={gridSpacing}\n                      justifyContent=\"space-between\"\n                    >\n                      <Grid item xs zeroMinWidth>\n                        <Skeleton variant=\"rect\" height={20} />\n                      </Grid>\n                      <Grid item>\n                        <Skeleton variant=\"rect\" height={16} width={16} />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={6}>\n                <Skeleton variant=\"rect\" height={20} />\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </CardContent>\n      <CardContent className={classes.cardAction}>\n        <Skeleton variant=\"rect\" height={25} width={75} />\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default PopularCard;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\n\n// material-ui\nimport { makeStyles } from \"@material-ui/styles\";\nimport { Avatar, Button, Grid, Typography } from \"@material-ui/core\";\n\n// third-party\n// import Chart from \"react-apexcharts\";\n\n// project imports\nimport MainCard from \"./../../ui-component/cards/MainCard\";\nimport SkeletonTotalOrderCard from \"./../../ui-component/cards/Skeleton/EarningCard\";\n\n// assets\nimport LocalMallOutlinedIcon from \"@material-ui/icons/LocalMallOutlined\";\nimport getPieChartOptions from \"./chart-data/pie-chart\";\nimport ReactApexChart from \"react-apexcharts\";\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    backgroundColor: theme.palette.primary.dark,\n    color: \"#fff\",\n    overflow: \"hidden\",\n    position: \"relative\",\n    \"&>div\": {\n      position: \"relative\",\n      zIndex: 5,\n    },\n    \"&:after\": {\n      content: '\"\"',\n      position: \"absolute\",\n      width: \"210px\",\n      height: \"210px\",\n      background: theme.palette.primary[800],\n      borderRadius: \"50%\",\n      zIndex: 1,\n      top: \"-85px\",\n      right: \"-95px\",\n      [theme.breakpoints.down(\"xs\")]: {\n        top: \"-105px\",\n        right: \"-140px\",\n      },\n    },\n    \"&:before\": {\n      content: '\"\"',\n      position: \"absolute\",\n      zIndex: 1,\n      width: \"210px\",\n      height: \"210px\",\n      background: theme.palette.primary[800],\n      borderRadius: \"50%\",\n      top: \"-125px\",\n      right: \"-15px\",\n      opacity: 0.5,\n      [theme.breakpoints.down(\"xs\")]: {\n        top: \"-155px\",\n        right: \"-70px\",\n      },\n    },\n  },\n  content: {\n    padding: \"20px !important\",\n  },\n  avatar: {\n    ...theme.typography.commonAvatar,\n    ...theme.typography.largeAvatar,\n    backgroundColor: theme.palette.primary[800],\n    color: \"#fff\",\n    marginTop: \"8px\",\n  },\n  cardHeading: {\n    fontSize: \"2.125rem\",\n    fontWeight: 500,\n    marginRight: \"8px\",\n    marginTop: \"14px\",\n    marginBottom: \"6px\",\n  },\n  subHeading: {\n    fontSize: \"1rem\",\n    fontWeight: 500,\n    color: theme.palette.primary[200],\n  },\n  avatarCircle: {\n    ...theme.typography.smallAvatar,\n    cursor: \"pointer\",\n    backgroundColor: theme.palette.primary[200],\n    color: theme.palette.primary.dark,\n  },\n  circleIcon: {\n    transform: \"rotate3d(1, 1, 1, 45deg)\",\n  },\n}));\n\n//-----------------------|| DASHBOARD - TOTAL ORDER LINE CHART CARD ||-----------------------//\n\nexport function seriesAndLables(metrics) {\n  let temp = {};\n  for (let i = 0; i < metrics.length; i++) {\n    let e = metrics[i];\n    if (temp.hasOwnProperty(e.class)) temp[e.class] += e.score;\n    else temp[e.class] = e.score;\n    temp[e.class] = parseFloat(Number(temp[e.class]).toFixed(2));\n  }\n  return { series: Object.values(temp), labels: Object.keys(temp) };\n}\n\nconst getChartData = (data) => {\n  const results = [];\n  for (let i = 0; i < data.length; i++) {\n    if (data[i].result.sentimentAnalysis && data[i].result.sentimentAnalysis.results) {\n      results.push(data[i].result.sentimentAnalysis.results.data.result.classPredictions);\n    }\n  }\n  return results.flat();\n};\n\nconst AnalyticsChart = ({ isLoading, data }) => {\n  const classes = useStyles();\n\n  const [timeValue, setTimeValue] = React.useState(false);\n  const handleChangeTime = (event, newValue) => {\n    setTimeValue(newValue);\n  };\n  getChartData(data);\n  let chartData = getPieChartOptions(seriesAndLables(getChartData(data)));\n\n  return (\n    <React.Fragment>\n      {isLoading ? (\n        <SkeletonTotalOrderCard />\n      ) : (\n        <MainCard border={false} className={classes.card} contentClass={classes.content}>\n          <Grid container direction=\"column\">\n            <Grid item>\n              <Grid container justifyContent=\"space-between\">\n                <Grid item>\n                  <Avatar variant=\"rounded\" className={classes.avatar}>\n                    <LocalMallOutlinedIcon fontSize=\"inherit\" />\n                  </Avatar>\n                </Grid>\n                <Grid item>\n                  <Button\n                    disableElevation\n                    variant={timeValue ? \"contained\" : \"string\"}\n                    size=\"small\"\n                    onClick={(e) => handleChangeTime(e, true)}\n                  >\n                    Month\n                  </Button>\n                  <Button\n                    disableElevation\n                    variant={!timeValue ? \"contained\" : \"string\"}\n                    size=\"small\"\n                    onClick={(e) => handleChangeTime(e, false)}\n                  >\n                    Year\n                  </Button>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item sx={{ mb: 0.75 }}>\n              <Grid container alignItems=\"center\">\n                <Grid item xs={6}>\n                  <Grid container alignItems=\"center\">\n                    <Grid item>\n                      <Typography className={classes.cardHeading}>Metrics</Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <Typography className={classes.subHeading}>\n                        {chartData.options.labels?.[0]} : {chartData.series?.[0]}\n                      </Typography>\n                      <Typography className={classes.subHeading}>\n                        {chartData.options.labels?.[1]} : {chartData.series?.[1]}\n                      </Typography>\n                      <Typography className={classes.subHeading}>\n                        {chartData.options.labels?.[2]} : {chartData.series?.[2]}\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                </Grid>\n                <Grid item xs={6}>\n                  <ReactApexChart\n                    options={chartData.options}\n                    series={chartData.series}\n                    type=\"pie\"\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </MainCard>\n      )}\n    </React.Fragment>\n  );\n};\n\nAnalyticsChart.propTypes = {\n  isLoading: PropTypes.bool,\n};\n\nexport default AnalyticsChart;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 6h-2c0-2.76-2.24-5-5-5S7 3.24 7 6H5c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm-7-3c1.66 0 3 1.34 3 3H9c0-1.66 1.34-3 3-3zm7 17H5V8h14v12zm-7-8c-1.66 0-3-1.34-3-3H7c0 2.76 2.24 5 5 5s5-2.24 5-5h-2c0 1.66-1.34 3-3 3z\"\n}), 'LocalMallOutlined');\n\nexports.default = _default;","import PropTypes from \"prop-types\";\nimport React from \"react\";\n\n// material-ui\nimport { makeStyles } from \"@material-ui/styles\";\nimport { Card, CardContent, CardHeader, Chip, Divider, Grid, Typography } from \"@material-ui/core\";\n\n// project imports\nimport MainCard from \"./../../ui-component/cards/MainCard\";\nimport SkeletonPopularCard from \"./../../ui-component/cards/Skeleton/PopularCard\";\nimport { gridSpacing } from \"./../../store/constant\";\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n  cardAction: {\n    padding: \"10px\",\n    paddingTop: 0,\n    justifyContent: \"center\",\n  },\n  primaryLight: {\n    color: theme.palette.primary[200],\n    cursor: \"pointer\",\n  },\n  divider: {\n    marginTop: \"12px\",\n    marginBottom: \"12px\",\n  },\n  avatarSuccess: {\n    width: \"16px\",\n    height: \"16px\",\n    borderRadius: \"5px\",\n    backgroundColor: theme.palette.success.light,\n    color: theme.palette.success.dark,\n    marginLeft: \"15px\",\n  },\n  successDark: {\n    color: theme.palette.success.dark,\n  },\n  avatarError: {\n    width: \"16px\",\n    height: \"16px\",\n    borderRadius: \"5px\",\n    backgroundColor: theme.palette.orange.light,\n    color: theme.palette.orange.dark,\n    marginLeft: \"15px\",\n  },\n  errorDark: {\n    color: theme.palette.orange.dark,\n  },\n}));\n\n//-----------------------|| DASHBOARD DEFAULT - POPULAR CARD ||-----------------------//\n\nconst getEntities = (data) => {\n  const results = [];\n  for (let i = 0; i < data.length; i++) {\n    if (data[i][1].includes(\"PER\")) results.push({ type: \"Person\", value: data[i][0] });\n    if (data[i][1].includes(\"LOC\")) results.push({ type: \"Location\", value: data[i][0] });\n    if (data[i][1].includes(\"ORG\")) results.push({ type: \"Organisation\", value: data[i][0] });\n    if (data[i][1].includes(\"MISC\")) results.push({ type: \"Miscellaneous\", value: data[i][0] });\n  }\n  return results;\n};\n\nconst EntitiesCard = ({ isLoading, data }) => {\n  const classes = useStyles();\n\n  // const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const entities = getEntities(\n    data.nameEntityRecognition ? data.nameEntityRecognition.results : [],\n  );\n\n  // const handleClick = (event) => {\n  //   setAnchorEl(event.currentTarget);\n  // };\n\n  // const handleClose = () => {\n  //   setAnchorEl(null);\n  // };\n\n  return (\n    entities.length > 0 && (\n      <React.Fragment>\n        {isLoading ? (\n          <SkeletonPopularCard />\n        ) : (\n          <MainCard content={false}>\n            <CardContent>\n              <Grid container spacing={gridSpacing}>\n                <Grid item xs={12}>\n                  <Grid container direction=\"column\">\n                    <Grid item>\n                      <Grid container alignItems=\"center\" justifyContent=\"space-between\">\n                        <Grid item>\n                          <Typography variant=\"h4\" color=\"inherit\">\n                            Named Entities\n                          </Typography>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                    <Grid item sx={{ display: \"flex\", flexWrap: \"wrap\" }}>\n                      {entities?.map((e, i) => (\n                        <Card key={i} style={{ margin: 2, textAlign: \"center\" }}>\n                          <CardHeader\n                            title={e?.name}\n                            subheader={e?.type}\n                            style={{ margin: 0, padding: 5 }}\n                          />\n                          <Chip label={e.value} />\n                        </Card>\n                      ))}\n                      <br />\n                    </Grid>\n                  </Grid>\n                  <Divider className={classes.divider} />\n                </Grid>\n              </Grid>\n            </CardContent>\n          </MainCard>\n        )}\n      </React.Fragment>\n    )\n  );\n};\n\nEntitiesCard.propTypes = {\n  isLoading: PropTypes.bool,\n};\n\nexport default EntitiesCard;\n","import axios from \"axios\";\nimport { API } from \"../../constants\";\nimport getAuthToken from \"../auth\";\n\nexport default async function getExperiences({ conversationId, data }) {\n  const TOKEN = await getAuthToken();\n  var config = {\n    method: \"post\",\n    url: API + `/conversations/${conversationId}/experiences`,\n    headers: {\n      Authorization: `Bearer ${TOKEN}`,\n      \"X-API-KEY\": TOKEN,\n      \"Content-Type\": \"application/json\",\n    },\n    data: data,\n  };\n  return axios(config);\n}\n","import { Avatar, Button, Chip, Divider, Grid, Modal, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport MainCard from \"../../../ui-component/cards/MainCard\";\nimport SubCard from \"../../../ui-component/cards/SubCard\";\nimport { gridSpacing } from \"../../../store/constant\";\nimport { useEffect, useState } from \"react\";\nimport EntitiesCard from \"../../dashboard/EntitiesCard\";\nimport { seriesAndLables } from \"../../dashboard/AnalyticsChart\";\nimport ReactApexChart from \"react-apexcharts\";\nimport getPieChartOptions from \"../../dashboard/chart-data/pie-chart\";\nimport getExperiences from \"../../../symbl.ai/conversation/getExperiences\";\nimport { getJobDetails } from \"../../../utils\";\n\nconst useStyles = makeStyles((theme) => ({\n  stepper: {\n    fontFamily: theme.fontFamily,\n    textAlign: \"center\",\n  },\n  input: {\n    display: \"none\",\n  },\n  center: {\n    textAlign: \"center\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  button: {\n    cursor: \"pointer\",\n    textAlign: \"center\",\n  },\n  signDivider: {\n    flexGrow: 1,\n  },\n  backButton: {\n    marginRight: theme.spacing(1),\n  },\n  startButton: {\n    cursor: \"pointer\",\n    textAlign: \"center\",\n    marginTop: 50,\n    color: theme.palette.success.dark,\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 180,\n    maxWidth: 500,\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: \"#fff\",\n  },\n  cardHeading: {\n    fontSize: \"1.825rem\",\n    fontWeight: 500,\n    marginRight: \"8px\",\n    marginTop: \"14px\",\n    marginBottom: \"6px\",\n  },\n  successDark: {\n    color: theme.palette.success.dark,\n  },\n  divider: {\n    marginTop: \"12px\",\n    marginBottom: \"12px\",\n  },\n  iframe: {\n    margin: \"0 auto\",\n    width: \"90%\",\n    height: \"90vh\",\n  },\n}));\n\nexport function topicsArray(topics) {\n  const temp = {};\n  if (topics && topics.length > 0) {\n    topics.map((t, i) => {\n      if (temp.hasOwnProperty(t)) temp[t] = temp[t] + 1;\n      else temp[t] = 1;\n      return t;\n    });\n  }\n  return temp;\n}\n\nfunction ExperienceModal({ conversationId, open, handleClose }) {\n  const classes = useStyles();\n\n  const [url, setUrl] = useState(\"\");\n  useEffect(() => {\n    if (conversationId) {\n      getExperiences({ conversationId, data: { name: \"verbose-text-summary\" } }).then((res) =>\n        setUrl(res.data.url),\n      );\n    }\n  }, [open, conversationId]);\n\n  const body = (\n    <div className={classes.center}>\n      <iframe title=\"none\" src={url} className={classes.iframe} />\n      <br />\n      <Button variant=\"contained\" color=\"secondary\" component=\"span\" onClick={handleClose}>\n        Close\n      </Button>\n    </div>\n  );\n\n  return (\n    <Modal\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"simple-modal-title\"\n      aria-describedby=\"simple-modal-description\"\n    >\n      {body}\n    </Modal>\n  );\n}\n\nexport default function Insights({ selected, isLoading }) {\n  const classes = useStyles();\n  const [details, setDetails] = useState({});\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    if (selected) {\n      getJobDetails(selected).then((res) => {\n        setDetails(res.data);\n        console.log(\"getJobDetails\", selected.itemId, res.data);\n      });\n    }\n  }, [selected]);\n\n  const chartData = getPieChartOptions(\n    seriesAndLables(\n      details.sentimentAnalysis && details.sentimentAnalysis.results\n        ? details.sentimentAnalysis.results.data.result.classPredictions\n        : [],\n    ),\n    true,\n  );\n\n  const topics = details.textTopics && details.textTopics.results ? details.textTopics.results : [];\n  const topicsMap = topicsArray(topics);\n\n  return (\n    <MainCard\n      className={classes.root}\n      title={<Button onClick={() => setOpen(!open)}>{details.name}</Button>}\n    >\n      <ExperienceModal\n        open={open}\n        handleClose={() => setOpen(false)}\n        conversationId={selected.conversationId}\n      />\n      <Grid container spacing={gridSpacing}>\n        {topics && topics.length > 0 && (\n          <Grid item lg={4} md={6} sm={6} xs={12}>\n            <SubCard>\n              <Grid container alignItems=\"center\">\n                <Grid item>\n                  <Typography className={classes.cardHeading}>Topics</Typography>\n                </Grid>\n                <Grid item>\n                  {Object.keys(topicsMap).map((k) => {\n                    return (\n                      <Chip\n                        key={k}\n                        size=\"small\"\n                        avatar={<Avatar>{topicsMap[k]}</Avatar>}\n                        label={k}\n                        color=\"secondary\"\n                        style={{ margin: 2, border: \"1px solid\", cursor: \"pointer\" }}\n                      />\n                    );\n                  })}\n                </Grid>\n              </Grid>\n            </SubCard>\n          </Grid>\n        )}\n        {details.sentimentAnalysis && details.sentimentAnalysis.results && (\n          <Grid item lg={6} md={6} sm={6} xs={12}>\n            <SubCard>\n              <Grid container alignItems=\"center\">\n                <Grid item>\n                  <Typography className={classes.cardHeading}>Metrics</Typography>\n                </Grid>\n                <Grid item>\n                  <ReactApexChart\n                    options={chartData.options}\n                    series={chartData.series}\n                    type=\"pie\"\n                    width={380}\n                  />\n                </Grid>\n              </Grid>\n            </SubCard>\n          </Grid>\n        )}\n\n        {details.textSummary && details.textSummary.results && (\n          <Grid item lg={4} md={8} sm={8}>\n            <SubCard>\n              <Grid item>\n                <Typography variant=\"h4\">Text Summary</Typography>\n              </Grid>\n              <Divider className={classes.divider} />\n              <Typography variant=\"subtitle1\" color=\"inherit\">\n                {details.textSummary.results.summary}\n              </Typography>\n            </SubCard>\n          </Grid>\n        )}\n\n        {details.nameEntityRecognition &&\n          details.nameEntityRecognition.results &&\n          details.nameEntityRecognition.results.length > 0 && (\n            <Grid item lg={8} md={6} sm={6} xs={12}>\n              <SubCard>\n                <EntitiesCard data={details} />\n              </SubCard>\n            </Grid>\n          )}\n      </Grid>\n    </MainCard>\n  );\n}\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\n\n// material-ui\nimport { makeStyles } from \"@material-ui/styles\";\nimport {\n  Button,\n  CardActions,\n  CardContent,\n  Divider,\n  Grid,\n  Menu,\n  MenuItem,\n  Typography,\n} from \"@material-ui/core\";\n\n// project imports\nimport MainCard from \"../../../ui-component/cards/MainCard\";\nimport SkeletonJobStatus from \"../../../ui-component/cards/Skeleton/JobStatus\";\nimport { gridSpacing } from \"../../../store/constant\";\n\n// assets\nimport ChevronRightOutlinedIcon from \"@material-ui/icons/ChevronRightOutlined\";\nimport MoreHorizOutlinedIcon from \"@material-ui/icons/MoreHorizOutlined\";\nimport AnimateButton from \"../../../ui-component/extended/AnimateButton\";\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n  none: {},\n  cardAction: {\n    padding: \"10px\",\n    paddingTop: 0,\n    justifyContent: \"center\",\n  },\n  primaryLight: {\n    color: theme.palette.primary[200],\n    cursor: \"pointer\",\n  },\n  divider: {\n    marginTop: \"12px\",\n    marginBottom: \"12px\",\n  },\n  center: {\n    textAlign: \"center\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  avatarSuccess: {\n    width: \"16px\",\n    height: \"16px\",\n    borderRadius: \"5px\",\n    backgroundColor: \"transparent\",\n    color: theme.palette.success.dark,\n    marginRight: \"15px\",\n  },\n  successDark: {\n    color: theme.palette.success.dark,\n    cursor: \"unset\",\n  },\n  rotateIcon: {\n    animation: \"spin 4s linear infinite\",\n  },\n  avatarError: {\n    width: \"16px\",\n    height: \"16px\",\n    borderRadius: \"5px\",\n    backgroundColor: \"transparent\",\n    color: theme.palette.orange.dark,\n    marginRight: \"15px\",\n  },\n  errorDark: {\n    color: theme.palette.orange.dark,\n    cursor: \"unset\",\n  },\n}));\n\n//-----------------------|| DASHBOARD DEFAULT - POPULAR CARD ||-----------------------//\n\nconst ConversationList = (props) => {\n  const classes = useStyles();\n  const { isLoading, conversations, setSelected } = props;\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  console.log(\"conversations\", conversations);\n\n  return (\n    <React.Fragment>\n      {isLoading ? (\n        <SkeletonJobStatus />\n      ) : (\n        <MainCard content={false}>\n          <CardContent>\n            <Grid container spacing={gridSpacing}>\n              <Grid item xs={12}>\n                <Grid container alignContent=\"center\" justifyContent=\"space-between\">\n                  <Grid item>\n                    <Typography variant=\"h4\">Conversations</Typography>\n                  </Grid>\n                  <Grid item>\n                    <MoreHorizOutlinedIcon\n                      fontSize=\"small\"\n                      className={classes.primaryLight}\n                      aria-controls=\"menu-popular-card\"\n                      aria-haspopup=\"true\"\n                      onClick={handleClick}\n                    />\n                    <Menu\n                      id=\"menu-popular-card\"\n                      anchorEl={anchorEl}\n                      keepMounted\n                      open={Boolean(anchorEl)}\n                      onClose={handleClose}\n                      variant=\"selectedMenu\"\n                      anchorOrigin={{\n                        vertical: \"bottom\",\n                        horizontal: \"right\",\n                      }}\n                      transformOrigin={{\n                        vertical: \"top\",\n                        horizontal: \"right\",\n                      }}\n                    >\n                      <MenuItem onClick={handleClose}> Today</MenuItem>\n                      <MenuItem onClick={handleClose}> This Month</MenuItem>\n                      <MenuItem onClick={handleClose}> This Year </MenuItem>\n                    </Menu>\n                  </Grid>\n                </Grid>\n              </Grid>\n\n              <Grid item xs={12}>\n                {conversations.map((e, i) => {\n                  return (\n                    <div key={i} onClick={() => setSelected(e)} style={{ cursor: \"pointer\" }}>\n                      <AnimateButton>\n                        <Grid container direction=\"column\">\n                          <Grid item>\n                            <Grid container alignItems=\"center\" justifyContent=\"space-between\">\n                              <Grid item>\n                                <Typography variant=\"h5\" color=\"inherit\">\n                                  {e.type && (\n                                    <>\n                                      <strong>{e.type}</strong> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                                    </>\n                                  )}\n                                  <strong>{e.name}</strong>\n                                </Typography>\n                                <Typography variant=\"h5\" color=\"inherit\">\n                                  {new Date(e.timestamp).toLocaleString()}\n                                  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\" \"}\n                                </Typography>\n                              </Grid>\n                            </Grid>\n                          </Grid>\n                          <Grid item>\n                            <Typography variant=\"subtitle2\" className={classes.successDark}>\n                              <strong>ItemId ID: </strong> {e.itemId}\n                            </Typography>\n                          </Grid>\n                        </Grid>\n                        {i !== conversations.length - 1 ? (\n                          <Divider className={classes.divider} />\n                        ) : (\n                          \"\"\n                        )}\n                      </AnimateButton>\n                    </div>\n                  );\n                })}\n              </Grid>\n            </Grid>\n          </CardContent>\n          <CardActions className={classes.cardAction}>\n            <Button size=\"small\" disableElevation>\n              View All\n              <ChevronRightOutlinedIcon />\n            </Button>\n          </CardActions>\n        </MainCard>\n      )}\n    </React.Fragment>\n  );\n};\n\nConversationList.propTypes = {\n  isLoading: PropTypes.bool,\n};\n\nexport default ConversationList;\n","import React, { useEffect, useState } from \"react\";\nimport { Chip, Grid, TextField } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport Insights from \"./Insights\";\n\nimport { Autocomplete } from \"@material-ui/core\";\nimport \"react-date-range/dist/styles.css\"; // main style file\nimport \"react-date-range/dist/theme/default.css\"; // theme css file\n// import { DateRange } from \"react-date-range\";\n\nimport \"react-grid-layout/css/styles.css\"; // main style file\nimport \"react-resizable/css/styles.css\"; // main style file\nimport ConversationsList from \"./ConversationList\";\nimport { gridSpacing } from \"../../../store/constant\";\nimport AnimateButton from \"../../../ui-component/extended/AnimateButton\";\nimport { getItems, updateStatus, getAllTopics } from \"../../../utils\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n    textAlign: \"center\",\n    position: \"absolute\",\n    maxWidth: 700,\n    left: \"50%\",\n    top: \"40%\",\n    transform: \"translate(-50%, -50%)\",\n  },\n  center: {\n    textAlign: \"center\",\n  },\n  text: {\n    fontWeight: \"bold\",\n    padding: 5,\n  },\n  button: {\n    marginTop: 25,\n  },\n  divider: {\n    marginTop: \"12px\",\n    marginBottom: \"12px\",\n  },\n  gridItem: {\n    border: \"1px solid black\",\n  },\n  item: {\n    border: \"1px solid black\",\n  },\n  formControl: {\n    minWidth: 210,\n  },\n  subcard: {\n    margin: theme.spacing(0.5),\n  },\n}));\n\n//==============================|| ASYNC ||==============================//\n\nfunction TopicPicker({ topics, setTopics, topicList }) {\n  const classes = useStyles();\n  return (\n    <Autocomplete\n      multiple\n      value={topics}\n      onChange={(e, newValue) =>\n        setTopics([...topics, ...newValue.filter((option) => topics.indexOf(option) === -1)])\n      }\n      id=\"tags-outlined\"\n      options={topicList}\n      defaultValue={[]}\n      freeSolo\n      renderTags={(value, getTagProps) =>\n        value.map((option, index) => (\n          <AnimateButton key={index}>\n            <Chip key={index} variant=\"outlined\" label={option} {...getTagProps({ index })} />\n          </AnimateButton>\n        ))\n      }\n      renderInput={(params) => (\n        <TextField\n          className={classes.formControl}\n          {...params}\n          variant=\"outlined\"\n          label=\"Topics\"\n          placeholder=\"Topics\"\n        />\n      )}\n    />\n  );\n}\n\nconst ConversationsAPI = () => {\n  const [isLoading, setLoading] = useState(true);\n  const [data, setData] = useState([]);\n  const [selected, setSelected] = useState({});\n  const [topics, setTopics] = useState([]);\n  const [conversations, setConversations] = useState([]);\n\n  const setConversationsUpdate = (data) => {\n    updateStatus(data).then((data) => {\n      setConversations(data);\n      data.length > 0 && setSelected(data[0]);\n    });\n  };\n\n  useEffect(() => {\n    setLoading(false);\n    getItems(setConversationsUpdate);\n    getAllTopics(setData);\n  }, []);\n\n  const doms = [\n    <Insights isLoading={isLoading} selected={selected} data={data} />,\n    <TopicPicker\n      topics={topics}\n      setTopics={setTopics}\n      topicList={data?.topics?.map((e) => e.text)}\n    />,\n    <ConversationsList\n      isLoading={isLoading}\n      conversations={conversations}\n      setConversations={setConversations}\n      setSelected={setSelected}\n    />,\n  ];\n\n  return (\n    <Grid container spacing={gridSpacing}>\n      <Grid item xs={8}>\n        {selected && doms[0]}\n      </Grid>\n      <Grid item lg={4} md={6} sm={6} xs={6}>\n        {doms[1]}\n        <br />\n        {doms[2]}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default ConversationsAPI;\n"],"sourceRoot":""}